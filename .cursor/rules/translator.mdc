---
description: 
globs: 
---
To determine if the Translator API is supported, run the following feature detection snippet.
if ('ai' in self && 'translator' in self.ai) {
  // The Translator API is supported.
}

Check language pair support
Translation is managed with language packs, downloaded on demand. A language pack is like a dictionary for a given language.

sourceLanguage: The current language for the text.
targetLanguage: The final language the text should be translated into.
Use BCP 47 language short codes as strings. For example, 'es' for Spanish or 'fr' for French.

 const translatorCapabilities = await self.ai.translator.capabilities();
 translatorCapabilities.languagePairAvailable('es', 'fr');
 // 'readily'

 You can listen for model download progress using the downloadprogress event:
 const translator = await self.ai.translator.create({
  sourceLanguage: 'es',
  targetLanguage: 'fr',
  monitor(m) {
    m.addEventListener('downloadprogress', (e) => {
      console.log(`Downloaded ${e.loaded} of ${e.total} bytes.`);
    });
  },
});

Create and run the translator
To create a translator, call the asynchronous translation.createTranslator() function. Like canTranslate(), it requires an options parameter with two fields, one for the sourceLanguage and one for the targetLanguage.

// Create a translator that translates from English to French.
const translator = await self.ai.translator.create({
  sourceLanguage: 'en',
  targetLanguage: 'fr',
});

Once you have a translator, call the asynchronous translate() function to translate your text.
await translator.translate('Where is the next bus stop, please?');
// "Où est le prochain arrêt de bus, s'il vous plaît ?"

